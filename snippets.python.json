{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
    "if(main)": {
        "prefix": ["ifmain"],
        "body": ["if __name__ == '__main__':", "    ${1:pass}"],
        "description": "Code snippet for a `if __name__ == '__main__': ...` block"
    },
    "Save Debug Snapshot": {
        "prefix": "save_snapshot",
        "body": [
            "from debugsnap import save_snapshot",
            "save_snapshot(local_vars=locals(), global_vars=globals())"
        ],
        "description": "Save the current state of local and global variables, excluding specific ones."
    },
    "Load Debug Snapshot": {
        "prefix": "load_snapshot",
        "body": [
            "from debugsnap import load_snapshot",
            "global_vars, local_vars = load_snapshot()",
            "globals().update(global_vars)",
            "locals().update(local_vars)"
        ],
        "description": "Load a saved state into the current global and local variables."
    },
    "Pandas Merge Template": {
        "prefix": "merge",
        "body": [
            "merge(",
            "    ${2:df2},",
            "    how=\"left\",",
            "    left_on=[\"${3:merge_id}\"],",
            "    right_on=[\"${3:merge_id}\"],",
            "    validate=\"m:1\"",
            ")",
            ""
        ],
        "description": "Template for merging two pandas DataFrames with validation"
    }
}

